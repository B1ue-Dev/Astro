{
    "#help": {
        "author": "242351388137488384",
        "created_at": 1649467711.248774,
        "description": "Please create a thread in <#898281873946579034> and ask your question, along with the full error stack trace and code related to it in it. It does not matter how big or small your question is, just create a thread, and a helper will help you momentarily.\n\nHelpers are also volunteers, so please be patient!",
        "id": 9,
        "last_edited_at": 1650071867.296208,
        "name": "Send in #help instead."
    },
    "403 Authentication error": {
        "author": "242351388137488384",
        "created_at": 1649467322.64357,
        "description": "If you are getting a **403: Missing Permissions** error, make sure you have __authorized your bot__ with the `applications.commands` scope as well as the bot scope, and then re-invite your bot.",
        "id": 2,
        "name": "403 Authentication error"
    },
    "Application command": {
        "author": "242351388137488384",
        "created_at": 1649467574.713036,
        "description": "interactions.py moves away from text-based commands (e.g. `!test`) by using **application commands**, also known as slash or context menu commands.\n\nBelow is an example of a chat-input command, one of the many variations of an application command.\n\n```py\nimport interactions\n\nbot = interactions.Client(token=\"...\")\n\n@bot.command(\n\tname=\"my_new_command\",\n\tdescription=\"Test description!\",\n\tscope=guild_id,\n)\nasync def my_command(ctx: interactions.CommandContext):\n\tawait ctx.send(\"Hi there!\")\n```\n\n**NOTE:**\n- Command names must be lowercase and can only contain hyphens (`-`) or underscores (`_`) as special symbols. Spaces are not permitted.\n- If you do not specify a `scope`, the command will be registered **global** and can take up to 1 hour to appear. (See `Global vs. guild` for more.)",
        "id": 5,
        "last_edited_at": 1650071079.782153,
        "name": "Creating a basic command"
    },
    "Application command option choices": {
        "author": "242351388137488384",
        "created_at": 1649467685.823687,
        "description": "It is possible in interactions.py to force a list of values for a command's option. These are called **choices**. Below is an example.\n\n```py\nimport interactions\n\nbot = interactions.Client(token=\"...\")\n\n@bot.command(\n\tname=\"another_command\", \n\tdescription=\"Test description!\", \n\tscope=guild_id,\n\toptions= [\n\t\tinteractions.Option(\n\t\t\tname=\"choose_wisely\",\n\t\t\tdescription=\"A descriptive description\",\n\t\t\ttype=interactions.OptionType.STRING,\n\t\t\trequired=True,\n\t\t\tchoices=[\n\t\t\t\tinteractions.Choice(name=\"Death\", value=\"death\"), interactions.Choice(name=\"run\", value=\"run\"), \n\t\t\t], \n\t\t),\n\t],\n)\nasync def cmd(ctx: interactions.CommandContext, choose_wisely: str):\n\tif choose_wisely == \"run\":\n\t\tawait ctx.send(f\"{ctx.author.user.name} runs away!\") \n\telif choose_wisely == \"death\":\n\t\tawait ctx.send(f\"So... You've chosen death, <@{ctx.author.user.id}>?\")\n```\n\n**NOTE:** an application command option can only have up to 25 choices.",
        "id": 8,
        "last_edited_at": 1650071664.778143,
        "name": "Forcing values for a command option"
    },
    "Application command options": {
        "author": "242351388137488384",
        "created_at": 1649467618.015548,
        "description": "In interactions.py, you're able to add arguments to your command, otherwise known as \"options.\" Below is an example.\n\n```py\nimport interactions\n\nbot = interactions.Client(token=\"...\")\n\n@bot.command(\n\tname=\"another_command\", \n\tdescription=\"Test description!\", \n\tscope=guild_id,\n\toptions= [\n\t\tinteractions.Option(\n\t\t\tname=\"option\",\n\t\t\tdescription=\"A descriptive description\",\n\t\t\ttype=interactions.OptionType.thetypeyouwant,\n\t\t\trequired=False,\n\t\t),\n\t],\n)\nasync def cmd(ctx: interactions.CommandContext, option=None):\n\tawait ctx.send(f\"you put in {option}\")\n```\n\n**NOTE:** The limits for an option's `name` field are the same as for application commands.",
        "id": 6,
        "last_edited_at": 1650070933.329476,
        "name": "Adding \u2728 options \u2728 to a command."
    },
    "Application subcommands": {
        "author": "242351388137488384",
        "created_at": 1649467661.024177,
        "description": "interactions.py offers compatibility with providing more rigid structures for your application commands in the form of groups and divisions. These are known as **subcommands.** Below is an example.\n\n```py\nimport interactions\n\nbot = interactions.Client(token=\"...\")\n\n@bot.command(\n    name=\"base_command\", \n    description=\"This description isn't seen in UI (yet?)\", \n    scope=guild_id,\n    options= [\n        interactions.Option(\n            name=\"command_name\",\n            description=\"A descriptive description\",\n            type=interactions.OptionType.SUB_COMMAND\n            options=[\n                interactions.Option(\n                    name=\"option\",\n                    description=\"A descriptive description\",\n                    type=interactions.OptionType.thetypeyouwant,\n                    required=False,\n                ),\n        interactions.Option(\n            name=\"second_command\",\n            description=\"A descriptive description\",\n            type=interactions.OptionType.SUB_COMMAND\n            options=[\n                interactions.Option(\n                    name=\"second_option\",\n                    description=\"A descriptive description\",\n                    type=interactions.OptionType.thetypeyouwant,\n                    required=False,\n                ),\n            ],\n        ),\n    ],\n)\nasync def cmd(ctx: interactions.CommandContext, sub_command: str, option=None, second_option=None):\n    if sub_command == \"command_name\":\n      await ctx.send(f\"You selected the command_name sub command and put in {option}\")\n    elif sub_command == \"second_command\":\n      await ctx.send(f\"You selected the second_command sub command and put in {second_option}\")\u200a\n```\n\n**NOTE:** An application command option with the type `SUB_COMMAND_GROUP` are able to be added between a `SUB_COMMAND` option and the top-level of the command.\n\n(Top-level is the first `name` at the top of your application command.)",
        "id": 7,
        "last_edited_at": 1650071808.449873,
        "name": "Nesting commands as \"subcommands.\""
    },
    "Documentation website": {
        "author": "242351388137488384",
        "created_at": 1649467833.029604,
        "description": "Please refer to [this link here](https://interactionspy.rtfd.io/en/latest) for reading up on our library's documentation.",
        "id": 13,
        "name": "Documentation website"
    },
    "Gateway events": {
        "author": "242351388137488384",
        "created_at": 1649467760.747244,
        "description": "interactions.py currently lacks heavy documentation on all Gateway events currently accepted. In order to see a comprehensive list of those compatible, see the [documented Discord gateway events](https://discord.com/developers/docs/topics/gateway#commands-and-events-gateway-events) from the Discord Developer Portal.",
        "id": 10,
        "last_edited_at": 1650071575.67892,
        "name": "Gateway events"
    },
    "Getting help with v3.": {
        "author": "242351388137488384",
        "created_at": 1649467952.528479,
        "description": "We do not offer support for v3 of this library and discord-components library anymore since they are has reached EOL. We highly recommend you switch to v4. Here's a link to our quickstart guide, which should explain basic features of this library and more: https://discord-interactions.readthedocs.io/en/latest/quickstart.html",
        "id": 15,
        "name": "Getting help with v3."
    },
    "Global vs. guild": {
        "author": "242351388137488384",
        "created_at": 1649467808.072785,
        "description": "In interactions.py, there's a differentiation between what we call a command global and then \"per guild.\"\n\n**Global commands**\n- Lack the `scope` field in the `@command` decorator.\n- Can take up to 1 hour for creating, modifying and deleting.\n- Appear in every guild the bot is in.\n\n**Guild commands**\n- Have the `scope` field in the `@command` decorator.\n- Changes are registered instantaneously for creating, modifying and deleting.\n- Only appear in the guild(s) assigned to.",
        "id": 12,
        "last_edited_at": 1650071279.160009,
        "name": "Global vs. \"guild\" commands."
    },
    "Interaction response deferring/delay": {
        "author": "242351388137488384",
        "created_at": 1649467508.52962,
        "description": "If your command takes more than **3 seconds** to give a response, you might be getting an error back from Discord looking something like this:\n\n> **This interaction failed.** \n\nIn order to avoid this happening to your bot's precious command, add this to the __beginning__ of your command's code:\n\n```py\n@bot.command(...)\nasync def slash_command(ctx):\n  await ctx.defer()\n  ...\n```",
        "id": 5,
        "last_edited_at": 1650071380.318528,
        "name": "Deferring/\"delaying\" a command response"
    },
    "Positional arguments from command function": {
        "author": "242351388137488384",
        "created_at": 1649467358.085568,
        "description": "Make sure you write the names of your options in lowercase.",
        "id": 3,
        "name": "Positional arguments from command function"
    },
    "Scaling your codebase with extensions.": {
        "author": "143773579320754177",
        "created_at": 1649467929.53674,
        "description": "**Extensions** are a new way of scaling the code of your bot, allowing versatility in modularity. Extensions perform similarly to discord.py's `Cog` paradigm with some slight differences. Here's how you can make one:\n\n`main.py`:\n\n```py\nclient = interactions.Client(...)\n\n...\n\nclient.load(\"your.cog\")\nclient.start()\n```\n\n`name_of_other_file.py`:\n\n```py\nclass TestCommand(interactions.Extension):\n  def __init__(self, client):\n    self.client: interactions.Client = client\n\n  @interactions.extension_command(...)\n  async def test_command(self, ctx, ...):\n    ...\n\ndef setup(client):\n  TestCommand(client)\n```",
        "id": 14,
        "last_edited_at": 1649847133.024514,
        "name": "Scaling your codebase with extensions."
    },
    "Try it and see": {
        "author": "242351388137488384",
        "created_at": 1649467392.309101,
        "description": "Just [try it and see.](https://tryitands.ee)",
        "id": 4,
        "name": "Try it and see"
    },
    "Tutorials": {
        "author": "242351388137488384",
        "created_at": 1649467787.507548,
        "description": "Here is a [playlist](https://www.youtube.com/playlist?list=PLnI02ssmcTo3qChwe5_tRyILLqrAExZlo) of tutorials on how to use interactions.py v4!",
        "id": 11,
        "last_edited_at": 1650071929.343672,
        "name": "YouTube tutorials"
    },
    "running d.py alongside i.py": {
        "author": "242351388137488384",
        "created_at": 1650030501.392859,
        "description": "Here's how to run discord.py with interactions.py:\n```py\nimport interactions\nfrom discord.ext import commands\n\nclient = interactions.Client(token=\"...\")\ndpy = commands.Bot(prefix=\"/\")\n\n@dpy.command()\nasync def hello(ctx):\n    await ctx.send(\"Hello from discord.py!\")\n\n@client.command(\n    name=\"test\",\n    description=\"this is just a testing command.\"\n)\nasync def test(ctx):\n    await ctx.send(\"Hello from discord-interactions!\")\n\nloop = asyncio.get_event_loop()\n\ntask2 = loop.create_task(dpy.start(\"TOKEN\", bot=True))\ntask1 = loop.create_task(client._ready())\n\ngathered = asyncio.gather(task1, task2, loop=loop)\nloop.run_until_complete(gathered)\n```\n\nIf you are using python>=3.10, omit the `loop=loop` argument in `asyncio.gather`",
        "id": 16,
        "last_edited_at": 1650070666.275315,
        "name": "d.py and i.py"
    }
}